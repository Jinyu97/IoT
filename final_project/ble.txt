/* -------------------------------------------------------------------------
	Include
 ------------------------------------------------------------------------- */
#include "../ubiconfig.h"

// standard c library include
#include <stdio.h>
#include <stdlib.h>
#include <sam4e.h>

// ubinos library include
#include "itf_ubinos/itf/bsp.h"
#include "itf_ubinos/itf/ubinos.h"
#include "itf_ubinos/itf/bsp_fpu.h"
#include "itf_ubinos/itf/ubik_mutex.h"


// chipset driver include
#include "ioport.h"
#include "pio/pio.h"

// new estk driver include
#include "lib_new_estk_api/itf/new_estk_led.h"
#include "lib_new_estk_api/itf/new_estk_glcd.h"
#include "lib_sensorcalib/itf/lib_sensorcalib.h"
#include "lib_EV3_sensor/itf/lib_EV3_sensor.h"
#include "lib_switch/itf/lib_switch.h"
#include "lib_sensor/itf/lib_sensor.h"
#include "lib_i2c/itf/lib_i2c.h"
#include "lib_motor_driver/itf/lib_motor_driver.h"
#include "lib_ubi_pio/itf/lib_ubi_pio.h"
#include "lib_new_estk_api/itf/new_estk_ioport_set.h"

#include "lib_bluetooth/itf/BT_Module_Interface.h"
#include "lib_bluetooth/itf/lib_BT.h"
// custom library header file include
//#include "../../lib_default/itf/lib_default.h"


#define BLE_MODULE_ID_0	0X01
#define BLE_MODULE_ID_1	0X02
#define BLE_MODULE_ID_2	0X03
#define BLE_MODULE_ID_3	0X60

#define R_MOTOR_PORT	0

//print_packet is a 19 bytes without Command
uint8_t print_packet[DATA_SEND_BUFFER_SIZE] = {0,};
int motorset = 0;


//Main Task Massage Queue
msgq_pt BT_user_event_queue;
//Mutex for print_packet
mutex_pt _g_mutex;

// user header file include

/* -------------------------------------------------------------------------
	Global variables
 ------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------
	Prototypes
 ------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------
	Function Definitions
 ------------------------------------------------------------------------- */
int usrmain(int argc, char * argv[]) {
	int r;

	printf("\n\n\n\r");
	printf("================================================================================\n\r");
	printf("exe_ble_test (build time: %s %s)\n\r", __TIME__, __DATE__);
	printf("================================================================================\n\r");

	glcd_init();
	motor_init();
	mutex_create(&_g_mutex);

	r = task_create(NULL, lcd_outputtask, NULL, task_getmiddlepriority()-1, 256, "outputtask");
	if (0 != r) {
		logme("fail at task_create\r\n");
	}

	r = task_create(NULL, BT_peripheraltask, NULL, task_getmiddlepriority(), 512, "root");
		if (0 != r) {
			logme("fail at BT_user_task_create\r\n");
		}

	r = msgq_create(&BT_user_event_queue, sizeof(BT_Evt_t), MAIN_MSGQ_MAX_COUNT);
	if (0 != r) {
				logme("fail at msgq_create\r\n");
			}

	ubik_comp_start();

	return 0;
}


static void BT_peripheraltask(void *arg){
	int r = 0;
	module_id_st BT_ID;
	BT_Evt_t BT_usr_msgRXBuffer = {0, };

	//set BT_module_ID
	BT_ID.module_id[0] = BLE_MODULE_ID_0;
	BT_ID.module_id[1] = BLE_MODULE_ID_1;
	BT_ID.module_id[2] = BLE_MODULE_ID_2;
	BT_ID.module_id[3] = BLE_MODULE_ID_3;

	task_sleep(200);

	BT_INIT(INIT_ROLE_PERIPHERAL,BT_ID, BT_user_event_queue);

	BT_ADV_START();


	for(;;) {
		r = msgq_receive(BT_user_event_queue, (unsigned char*) &BT_usr_msgRXBuffer);

		if ( 0 != r) {
			logme("fail at msgq_receive\r\n");
		} else {
			switch (BT_usr_msgRXBuffer.status) {
			case BT_EVT_PE_DATA_READ: {
				//motor setting
				mutex_lock(_g_mutex);
				motorset = (int)((BT_usr_msgRXBuffer.msg[1]<<8)|(BT_usr_msgRXBuffer.msg[0]));


				for(int i=0; i<20; i++){
					print_packet[i] = BT_usr_msgRXBuffer.msg[i];

				}

				mutex_unlock(_g_mutex);
				//start motor
				motor_set(R_MOTOR_PORT, motorset);

				bsp_busywaitms(1000);
				motor_set(R_MOTOR_PORT, 0);
				//send same msg
				BT_DATA_SEND(INIT_ROLE_PERIPHERAL,print_packet);

				task_sleep(500);
			}
				break;

			case BT_EVT_DISCONNECTED:

				break;

			case BT_EVT_CONNECTED:

				break;
			}
		}
	}
}

static void lcd_outputtask()
{
	task_sleep(300);
	//printf_packet is a 19 bytes without CMD
	while(1)
	{
		mutex_lock(_g_mutex);
		//2nd line
		glcdGotoChar(1,2);
			glcd_printf("%d",motorset);
		mutex_unlock(_g_mutex);

		task_sleep(200);
	}
}